name: PR Decorator
on:
  pull_request:
    types: [opened, edited, reopened, synchronize, labeled, unlabeled]


jobs:
  build:
    name: Build and Push Docker Image and Helm Chart to ACR
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]
    env:
      IMAGE_NAME: petclinic
      CHART_DIR: helm/petclinic
      CHART_NAME: petclinic
    outputs:
      preview_patch: ${{ steps.preview_patch.outputs.patch }}

    steps:
      - uses: actions/checkout@v4


      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.4

      - uses: azure/docker-login@v2
        with:
          login-server: ckcluster.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: create preview patch
        id: preview_patch
        run: |
          REG="ckcluster.azurecr.io"
          CHART_VERSION="0.1.0-${GITHUB_SHA::7}"
          # Quelle anpassen: patches-template.yaml ist ein Platzhalter
          #           PATCH_CONTENT="$(sed -e "s|\$IMAGETAG|12|g" -e "s|\$CHARTVERSION|12|g" previews/patches.yaml)"
          PATCH_CONTENT="$(sed -e "s|\$IMAGETAG|${{ github.sha }}|g" -e "s|\$CHARTVERSION|${CHART_VERSION}|g" previews/patches.yaml)"
          echo "$PATCH_CONTENT" > patches.yaml
          echo "$PATCH_CONTENT"
          DELIM="PATCH_EOF_$(date +%s)"
          {
            echo "patch<<$DELIM"
            printf '%s\n' "$PATCH_CONTENT"
            echo "$DELIM"
          } >> "$GITHUB_OUTPUT"

      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: patch
          path: patches.yaml
          retention-days: 1

      - name: Build and push Docker image to ACR
        run: |
          REG="ckcluster.azurecr.io"
          docker build -t "$REG/$IMAGE_NAME:${{ github.sha }}" -t "$REG/$IMAGE_NAME:latest" .
          docker push "$REG/$IMAGE_NAME:${{ github.sha }}"
          docker push "$REG/$IMAGE_NAME:latest"

      - name: Push Helm chart to ACR (OCI)
        env:
          HELM_EXPERIMENTAL_OCI: 1
        run: |
          REG="ckcluster.azurecr.io"
          helm registry login "$REG" --username "${{ secrets.REGISTRY_USERNAME }}" --password "${{ secrets.REGISTRY_PASSWORD }}"
          CHART_VERSION="0.1.0-${GITHUB_SHA::7}"
          helm package "$CHART_DIR" --version "$CHART_VERSION"
          helm push "$CHART_NAME-$CHART_VERSION.tgz" "oci://$REG/helm"



  servicelabels:
    runs-on: ubuntu-latest
    name: Flux Preview PR Deployment
    needs: build

    steps:
      - name: Checkout Ziel-Repo (Flux Config)
        uses: actions/checkout@v4
        with:
          repository: cekay79/fluxi-public-gitops
          ref: main
          token: ${{ secrets.GH_PAT }}

      - name: Collect service labels
        id: svc
        run: |
          echo "SERVICES=$(jq -r '.event.pull_request.labels[].name | select(startswith("svc:")) | sub("^svc:";"")' \
            <<< '${{ toJson(github) }}' | paste -sd, -)" >> $GITHUB_ENV

      - name: getpatch
        uses: actions/download-artifact@v5
        with:
          name: patch

      - name: Build kustomization.yaml from labels
        #if: env.SERVICES != ''
        run: |
          PREVIEW_DIR="clusters/npi/previews/pr-${{ github.event.pull_request.number }}"
          mkdir -p "$PREVIEW_DIR"
          cat > "$PREVIEW_DIR/namespace.yaml" <<'NS_EOF'
          apiVersion: v1
          kind: Namespace
          metadata:
            name: pr-${{ github.event.pull_request.number }}
          NS_EOF
          
          IFS=',' read -ra SVC <<< "$SERVICES"
          {
            echo "apiVersion: kustomize.config.k8s.io/v1beta1"
            echo "kind: Kustomization"
            echo "namespace: pr-${{ github.event.pull_request.number }}"
            echo "resources:"
            echo "  - ../../base/apps/pet-clinic"
            for s in "${SVC[@]}"; do
              echo "  - ../../base/apps/$s"
            done
            echo "  - namespace.yaml"
            echo "patches:"
            echo "  - path: patches.yaml"
          } > "$PREVIEW_DIR/kustomization.yaml"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          cp patches.yaml $PREVIEW_DIR/patches.yaml
          git add  $PREVIEW_DIR/patches.yaml
          git add  $PREVIEW_DIR/namespace.yaml
          git add "$PREVIEW_DIR/kustomization.yaml"
          git commit -m "chore: preview update f√ºr PR #${{ github.event.pull_request.number }}"
          git push origin main
          
